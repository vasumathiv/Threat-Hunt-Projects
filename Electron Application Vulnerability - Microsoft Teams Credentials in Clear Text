# Threat-Hunt-Projects
Threat Hunt on Electron Application Vulnerability - Microsoft Teams Credentials in Clear Text
Hypothesis:
An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.
MITRE ATT&CK Tactics and Techniques
  
MITRE ID
T1539

Platform Scope: Windows, Linux, MacOS
Required Attack Privileges: User, Admin
Understanding Electron Application:

Microsoft Teams is an Electron-based app. Electron works by creating a web application that runs through a customized browser. This is very convenient and makes development quick and easy. However, running a web browser within the context of an application requires traditional browser data like cookies, session strings, and logs. This is where issues around this vulnerability lie.
Electron does not support standard browser controls like encryption, and system-protected file locations are not supported by Electron out of the box with Electron and must be managed effectively to remain secure. 

Vulnerability in Microsoft Teams:
Teams is storing authentication data in clear text in two locations,

Those locations are:

Windows
%AppData%\Microsoft\Teams\Cookies
%AppData%\Microsoft\Teams\Local Storage\leveldb

macOS
~/Library/Application Support/Microsoft/Teams/Cookies
~/Library/Application Support/Microsoft/Teams/Local Storage/leveldb

Linux
~/.config/Microsoft/Microsoft Teams/Cookies
~/.config/Microsoft/Microsoft Teams/Local Storage/leveldb


1.	Storing access token in clear text
These access tokens can give access to the Outlook and Skype APIs. It is important to know that the Microsoft Teams architecture is a conglomeration of a wide variety of M365 services that relies on Skype, SharePoint, and Outlook to function—this explains the presence of these tokens.

2.	Storing Cookies in clear text, Cookies store data like session information, marketing tags, account information, and in some instances, access tokens. And the Teams Desktop application is storing the tokens here as well.  

Implications:

Microsoft stores these credentials to create a seamless single sign-on experience within the desktop application. However, the implementation of security controls enables attackers to access tokens. The desktop application creates opportunities for attackers to use credentials outside  their intended context because, unlike modern browsers, there are no additional security controls  to protect cookie data.
Anyone who installs and uses the Microsoft Teams client in this state is storing the credentials needed to perform any action possible through the Teams UI, even when Teams is shut down. This enables attackers to modify SharePoint files, Outlook mail and calendars, and Teams chat files. Even more damaging, attackers can tamper with legitimate communications within an organization by selectively destroying, exfiltrating, or engaging in targeted phishing attacks. There is no limit to an attacker’s ability to move through your company’s environment at this point.

This hypothesis will hunt for,

Any invocations made to the Teams locations where credentials are stored in clear text

•	In Carbon Black, perform an Event Search; 
(process_name:*Teams* AND process_name:*Cookies*) OR (process_name:*Teams* AND process_name:*leveldb*)

OR 

OS specific hunt:

Windows: 
(process_name:\\Microsoft\\Teams\\Cookies) OR (process_name:\\Microsoft\\Teams\\Local\ Storage\\leveldb)
macOS: 
(process_name:\/Application Support\/Microsoft\/Teams\/Cookies OR (process_name:\/ApplicationSupport\/Microsoft\/Teams\/Local\ Storage\/leveldb)
Linux: 
(process_name:\/Microsoft\/Microsoft Teams\/Cookies) OR (process_name:\/Microsoft\/Microsoft Teams\/Local\ Storage\/leveldb)
             

Reference:
https://www.vectra.ai/blogpost/undermining-microsoft-teams-security-by-mining-tokens
