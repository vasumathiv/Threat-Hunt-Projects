# Threat-Hunt-Projects
Hypothesis - Threat Hunt on Follina - Microsoft Code Execution Vulnerability
Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.
MITRE ATT&CK Tactics and Techniques
  
MITRE ID: T1203

Platform Scope: Windows

Required Attack Privileges: User
 
The Hunt Mission:
What is Follina:
A remote code execution vulnerability exists when MSDT is called using the URL protocol from a calling application such as Word. An attacker who successfully exploits this vulnerability can run arbitrary code with the privileges of the calling application. The attacker can then install programs, view, change, or delete data, or create new accounts in the context allowed by the user’s rights.
MSDT: 
The Microsoft Support Diagnostic Tool (MSDT) collects information to send to Microsoft Support. Microsoft Support will then analyze this information and use it to determine the resolution to any problems that you may be experiencing on your computer
Behavior of Follina:
Vulnerability code: CVE-2022-30190 
“Follina”, maldoc uses 
1.Word’s external template function to retrieve an HTML file from a server
2.Which then uses the “ms-msdt: //” URI scheme to get the malicious payload.

Mitigation Recommendations:
Disabling the MSDT URL protocol prevents troubleshooters from being launched as links including links throughout the operating system. Troubleshooters can still be accessed using the Get Help application and in system settings as other or additional troubleshooters.
Follow these steps to disable the MSDT URL protocol:
1.	Run Command Prompt as Administrator.
2.	Back up the registry key by executing the command “reg export HKEY_CLASSES_ROOT\ms-msdt filename“.
3.	Execute the command “reg delete HKEY_CLASSES_ROOT\ms-msdt /f”.
4.	Upgrade to a patched version when one becomes available
5.	Implement a network monitoring software that can help detect abnormal or malicious behavior 
6.	Ensure backups are up to date and could be used in the event of an incident, including at least one offline copy 
7.	Ensure devices are not exposed to the internet and use strong and unique password

To undo the workaround:
1.	Run Command Prompt as Administrator.
2.	Restore the previous registry key, by executing the command “reg import filename”

•	In CrowdStrike, perform an Event Search; 
1.	To detect the MSDT exploit using the command line,

TERM("msdt") (ParentBaseFileName="winword.exe" FileName="msdt.exe") ((CommandLine="*PCWDiagnostic*" CommandLine="*msmsdt*")
OR Commandline IN ("*IT_BrowseForFile*" "*Invoke*" "*FromBase64String*" "*/../../*"))
| stats values(_time) as eventTimes, values(GrandParentBaseFileName) as grandParentProcessNames, values(ParentBaseFileName) as
ParentProcesses, values(CommandLine) as commandLines, values(ContextProcessId_decimal) as contextProcessDecimal count by
ComputerName, ImageFileName
| convert ctime(eventTimes)

2.	Current iterations of the proof of concept will invoke msdt.exe from a Microsoft Office application. A generalized hunting query for MSDT invocation from Microsoft applications,

index=main sourcetype=ProcessRollup* event_simpleName=ProcessRollup2
| search ParentBaseFileName IN (winword.exe, excel.exe, powerpnt.exe, outlook.exe) 
| search FileName=msdt.exe
| table _time, aid, ComputerName, UserName, UserSid_readable, ParentBaseFileName, FileName, CommandLine
| lookup local=true aid_master aid OUTPUT AgentVersion, Version, MachineDomain, OU, SiteName



3.	To further profile and baseline normal msdt.exe usage in the environment, the following query can be used,

index=main sourcetype=ProcessRollup* event_simpleName=ProcessRollup2
| search FileName=msdt.exe
| eval FileName=lower(FileName)
| eval ParentBaseFileName=lower(ParentBaseFileName)
| stats dc(aid) as endpointCount, count(aid) as executionCount by FileName, ParentBaseFileName
| sort -executionCount 	 	 
 


